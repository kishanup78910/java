String method
// isEqual
startswith
endswith
compare to rturn positve in case is big or small in case of negative
// returnt the ascii value
s1.isey

   System.out.println(s1.equals(s2));
        System.out.println(s2.equals(s3));


        // toc check start with
        System.out.println(s1.startsWith("Ki"));
        System.out.println(s2.endsWith("h"));


  //charAt -  to get single character

  index. of


  // substring


// replace string

trime method remove extra space


to changess text to lower and uppercase


valueof -
The valueOf method in Java is used to convert a given data type to a String. It is a static method available in the String class. The valueOf method can take different types of arguments, such as int, float, double, char, boolean, or an object, and returns the corresponding String representation of that argument.

String buffer and string builder   - bydefault 16 character space
aapend method

insertn method

In Java, StringBuffer and StringBuilder are classes that provide mutable sequences of characters,
 allowing you to modify strings without creating new objects every time.

 common method method
 append(): Adds a string representation to the existing sequence.
 insert(): Inserts a string at a specified index.
 delete(): Removes characters between specified indices.
 reverse(): Reverses the sequence.
 length(): Returns the current length of the sequence.
 capacity(): Returns the current capacity of the sequence.


Thread Safety:

StringBuffer: It is thread-safe. All its methods are synchronized, meaning that only one thread can access a method of a StringBuffer object at a time. This ensures thread safety in a multithreaded environment, preventing data corruption.
StringBuilder: It is not thread-safe. Methods are not synchronized, so it is faster in single-threaded applications. However, in a multithreaded environment, you would need to manually synchronize it if multiple threads are modifying it at the same time.
Performance:

StringBuffer: Due to synchronization, StringBuffer is slower than StringBuilder in single-threaded contexts.
StringBuilder: Since it doesn't have the overhead of synchronization, StringBuilder is faster and more efficient in single-threaded scenarios.